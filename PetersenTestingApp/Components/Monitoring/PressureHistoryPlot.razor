@inject IJSRuntime JS
@using PetersenTestingAppLibrary.Classes

@if (Data?.Any() == true)
{
    <div class="bg-white p-4 rounded shadow">
        <div class="flex justify-center">
            <canvas id="pressureChart" width="800" height="400"></canvas>
        </div>
    </div>
}

@code {
    [Parameter] public List<SensorReading> Data { get; set; }
    private List<SensorReading>? _renderedData;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Data?.Any() == true && !ReferenceEquals(Data, _renderedData))
        {
            await RenderChartAsync();
            _renderedData = Data;
        }
    }

    private async Task RenderChartAsync()
    {
        var labels = Data.Select(p => p.TimeStamp.ToString("o")).ToList();
        var values = Data.Select(p => p.PressurePSI).ToList();

        var chartData = new
        {
            labels,
            datasets = new[]
            {
                new {
                    label = "Pressure (PSI)",
                    data = values,
                    fill = false,
                    borderColor = "#007bff",
                    tension = 0.1,
                    pointRadius = 0,
                    pointHoverRadius = 4
                }
            }
        };

        var totalMinutes = (Data.Last().TimeStamp - Data.First().TimeStamp).TotalMinutes;
        int stepSize = PickStepSize(totalMinutes);
        string unit = stepSize < 60 ? "minute" : stepSize < 1440 ? "hour" : "day";

        var chartOptions = new
        {
            responsive = true,
            maintainAspectRatio = false,
            plugins = new
            {
                title = new
                {
                    display = true,
                    text = "Pressure Over Time"
                },
                tooltip = new
                {
                    mode = "nearest",
                    intersect = false
                }
            },
            scales = new
            {
                x = new
                {
                    type = "time",
                    time = new
                    {
                        unit,
                        stepSize,
                        displayFormats = new
                        {
                            minute = "HH:mm",
                            hour = "MM/dd HH:mm",
                            day = "MM/dd"
                        }
                    },
                    title = new
                    {
                        display = true,
                        text = "Time",
                        font = new { size = 14 }
                    },
                    ticks = new
                    {
                        autoSkip = true,
                        maxRotation = 0,
                        minRotation = 0
                    }
                },
                y = new
                {
                    beginAtZero = true,
                    title = new
                    {
                        display = true,
                        text = "Pressure (PSI)",
                        font = new { size = 14 }
                    }
                }
            }
        };

        await JS.InvokeVoidAsync("renderPressureChart", "pressureChart", chartData, chartOptions);
    }

    private int PickStepSize(double totalMinutes)
    {
        int[] intervals = { 1, 5, 15, 30, 60, 180, 360, 720, 1440 };
        foreach (var i in intervals)
        {
            var ticks = totalMinutes / i;
            if (ticks >= 10 && ticks <= 25)
                return i;
        }
        return intervals.Last();
    }
}
