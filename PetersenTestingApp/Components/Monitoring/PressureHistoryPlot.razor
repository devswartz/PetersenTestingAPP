<div class="p-4 border bg-light rounded mb-4">
    <h5 class="mb-3">Select Sensor and Date Range</h5>
    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div class="alert alert-warning">@validationMessage</div>
    }
    <EditForm Model="@query" OnValidSubmit="OnQuerySubmit">
        <div class="mb-2">
            <label>Sensor ID</label>
            <InputText @bind-Value="query.SensorId" class="form-control" />
        </div>

        <div class="mb-2">
            <label>Start Date / Time</label>
            <InputDate @bind-Value="startDate" class="form-control" />
            <InputDate Type="InputDateType.Time" @bind-Value="startTime" class="form-control mt-1" />
        </div>

        <div class="mb-2">
            <label>End Date / Time</label>
            <InputDate @bind-Value="endDate" class="form-control" />
            <InputDate Type="InputDateType.Time" @bind-Value="endTime" class="form-control mt-1" />
        </div>

        <button type="submit" class="btn btn-primary mt-3">Plot</button>
    </EditForm>
</div>

@if (plotData?.Any() == true)
{
    <LineChart @ref="chart" TItem="double" Options="chartOptions" />
}
else if (plotData != null)
{
    <p class="text-muted">No data found for the selected sensor and date range.</p>
}

@code {
    private LineChart<double> chart;
    private List<SensorReading> plotData;
    private string? validationMessage;

    private LineChartOptions chartOptions = new()
    {
        Responsive = true,
        Plugins = new()
        {
            Title = new()
            {
                Display = true,
                Text = "Pressure Over Time"
            }
        }
    };

    private PlotQuery query = new();

    private DateTime startDate = DateTime.UtcNow.AddHours(-12).Date;
    private DateTime startTime = DateTime.UtcNow.AddHours(-12);
    private DateTime endDate = DateTime.UtcNow.Date;
    private DateTime endTime = DateTime.UtcNow;

    async Task OnQuerySubmit()
    {
        if (string.IsNullOrWhiteSpace(query.SensorId))
        {
            validationMessage = "Sensor ID is required.";
            plotData = null;
            return;
        }

        validationMessage = null;

        query.StartDate = startDate.Date + startTime.TimeOfDay;
        query.EndDate = endDate.Date + endTime.TimeOfDay;

        plotData = await DashboardBackendService
            .GetSensorReadingsForDateRangeAsync(query.SensorId, query.StartDate, query.EndDate);

        StateHasChanged(); // force rerender so chart appears

        await Task.Delay(50); // give it time to render and bind @ref

        if (chart != null)
        {
            await chart.Clear();

            var labels = plotData.Select(p => p.TimeStamp.ToString("yyyy-MM-dd HH:mm")).ToList();
            var values = plotData.Select(p => (double)p.PressurePSI).ToList();

            await chart.AddLabelsDatasetsAndUpdate(
                labels,
                new LineChartDataset<double>
                {
                    Label = "Pressure (PSI)",
                    Data = values,
                    Fill = false,
                    BackgroundColor = "#007bff",
                    BorderWidth = 2
                });
        }
    }

    public class PlotQuery
    {
        public string SensorId { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }
}

